'use client';

import { useEffect, useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import Navigation from '@/components/Navigation';

const AI_MODELS = [
  'Gemini-1.5-Pro',
  'Claude 3.5 Sonnet',
  'GPT-4',
  'Jamba'
] as const;

type AIModel = typeof AI_MODELS[number];

export default function Playground() {
  const router = useRouter();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [selectedModel, setSelectedModel] = useState<AIModel>('Claude 3.5 Sonnet');
  const [prompt, setPrompt] = useState('');
  const [conversationHistory, setConversationHistory] = useState<Array<{ role: string; content: string }>>([]);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // Ïä§ÌÅ¨Î°§ ÏûêÎèô Ïù¥ÎèôÏùÑ ÏúÑÌïú ref
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const messagesContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Check authentication
    const token = localStorage.getItem('token');
    if (!token) {
      router.push('/login');
      return;
    }
    
    setIsAuthenticated(true);
  }, [router]);

  // Ïä§ÌÅ¨Î°§ ÏûêÎèô Ïù¥Îèô Ìï®Ïàò
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ 
        behavior: 'smooth',
        block: 'end'
      });
    }
  };

  // ÎåÄÌôî Í∏∞Î°ùÏù¥ ÏóÖÎç∞Ïù¥Ìä∏Îê† ÎïåÎßàÎã§ Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú Ïù¥Îèô
  useEffect(() => {
    scrollToBottom();
  }, [conversationHistory, isLoading]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;

    setIsLoading(true);
    
    // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÎ•º ÎåÄÌôî Í∏∞Î°ùÏóê Ï∂îÍ∞Ä
    const userMessage = { role: 'user', content: prompt };
    const updatedHistory = [...conversationHistory, userMessage];
    setConversationHistory(updatedHistory);
    setPrompt(''); // ÏûÖÎ†•Ï∞Ω ÎπÑÏö∞Í∏∞
    
    try {
      // Claude 3.5 SonnetÏù¥ ÏÑ†ÌÉùÎêú Í≤ΩÏö∞Îßå Ïã§Ï†ú API Ìò∏Ï∂ú
      if (selectedModel === 'Claude 3.5 Sonnet') {
        const response = await fetch('http://localhost:4000/ai/playground-chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: prompt,
            conversationHistory: conversationHistory,
            maxTokens: 1000,
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.success) {
          // ÏÑúÎ≤ÑÏóêÏÑú Î∞òÌôòÎêú Ï†ÑÏ≤¥ ÎåÄÌôî Í∏∞Î°ùÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
          setConversationHistory(data.conversationHistory);
        } else {
          // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÎåÄÌôî Í∏∞Î°ùÏóê Ï∂îÍ∞Ä
          const errorMessage = { role: 'assistant', content: `‚ùå Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${data.error}` };
          setConversationHistory([...updatedHistory, errorMessage]);
        }
      } else {
        // Îã§Î•∏ Î™®Îç∏Îì§ÏùÄ ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïú†ÏßÄ
        setTimeout(() => {
          const simulationResponse = {
            role: 'assistant',
            content: `[${selectedModel}] ÏùëÎãµ: ${userMessage.content}Ïóê ÎåÄÌïú AI ÏÉùÏÑ± ÏùëÎãµÏûÖÎãàÎã§. Ïù¥Í≤ÉÏùÄ ÏãúÎÆ¨Î†àÏù¥ÏÖòÎêú ÏùëÎãµÏûÖÎãàÎã§.

Ïù¥ ÏùëÎãµÏùÄ ÏÑ†ÌÉùÌïòÏã† ${selectedModel} Î™®Îç∏ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§. Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ìï¥Îãπ Î™®Îç∏Ïùò APIÎ•º ÌÜµÌï¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏùëÎãµÏù¥ ÏÉùÏÑ±Îê©ÎãàÎã§.

üö® ÌòÑÏû¨ ${selectedModel}Îäî ÏãúÎÆ¨Î†àÏù¥ÏÖò Î™®ÎìúÏûÖÎãàÎã§. Claude 3.5 SonnetÏùÑ ÏÑ†ÌÉùÌïòÏãúÎ©¥ Ïã§Ï†ú AWS Bedrock APIÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.`
          };
          setConversationHistory([...updatedHistory, simulationResponse]);
          setIsLoading(false);
          return;
        }, 1500);
        return;
      }
    } catch (error) {
      console.error('API Ìò∏Ï∂ú Ïò§Î•ò:', error);
      const errorMessage = {
        role: 'assistant',
        content: `‚ùå Ïó∞Í≤∞ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}

üí° Ìï¥Í≤∞ Î∞©Î≤ï:
1. Î∞±ÏóîÎìú ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî (localhost:4000)
2. AWS Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä Ïò¨Î∞îÎ•¥Í≤å ÏÑ§Ï†ïÎêòÏóàÎäîÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî
3. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî`
      };
      setConversationHistory([...updatedHistory, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClear = () => {
    setPrompt('');
    setConversationHistory([]);
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <Navigation>
      <main className="p-6 bg-gray-50 min-h-screen">
        <div className="max-w-6xl mx-auto h-full">
          {/* Header */}
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
              <span className="text-white text-base font-bold">G</span>
            </div>
            <h1 className="text-2xl font-bold text-gray-800">GenAI Playground</h1>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm border h-[calc(80vh-140px)]">
            {/* Model Selection Header */}
            <div className="p-6 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <span className="text-base font-medium text-gray-700">‚ñº Select AI Model</span>
                  <div className="relative">
                    <button
                      type="button"
                      onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                      className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors flex items-center gap-2 text-base font-medium"
                    >
                      <span>{selectedModel}</span>
                      <span className="text-sm">‚ñº</span>
                    </button>
                    {isDropdownOpen && (
                      <div className="absolute top-full left-0 mt-1 bg-white border rounded-lg shadow-lg z-10 min-w-[220px]">
                        {AI_MODELS.map((model) => (
                          <button
                            key={model}
                            type="button"
                            onClick={() => {
                              setSelectedModel(model);
                              setIsDropdownOpen(false);
                            }}
                            className="block w-full text-left px-4 py-2 hover:bg-gray-50 first:rounded-t-lg last:rounded-b-lg text-base"
                          >
                            {model}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <button
                    type="button"
                    onClick={handleClear}
                    className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-base"
                  >
                    Clear
                  </button>
                  <button
                    onClick={handleSubmit}
                    disabled={!prompt.trim() || isLoading}
                    className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2 text-base font-medium"
                  >
                    {isLoading ? (
                      <>
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Running...</span>
                      </>
                    ) : (
                      <>
                        <span>Run</span>
                        <span>‚ñ∂</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>

            {/* Chat Interface */}
            <div className="flex flex-col p-6 h-[calc(100%-120px)]">
              {/* Chat Messages */}
              <div 
                ref={messagesContainerRef}
                className="flex-1 overflow-y-auto mb-4 space-y-4 min-h-0"
              >
                {conversationHistory.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-gray-400 text-base">
                    ÎåÄÌôîÎ•º ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!
                  </div>
                ) : (
                  conversationHistory.map((message, index) => (
                    <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <div className={`max-w-xs lg:max-w-md xl:max-w-lg px-4 py-2 rounded-lg ${
                        message.role === 'user' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-gray-200 text-gray-800'
                      }`}>
                        <div className="text-xs opacity-70 mb-1">
                          {message.role === 'user' ? 'You' : selectedModel}
                        </div>
                        <pre className="whitespace-pre-wrap text-sm leading-relaxed">{message.content}</pre>
                      </div>
                    </div>
                  ))
                )}
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-200 text-gray-800 max-w-xs px-4 py-2 rounded-lg">
                      <div className="text-xs opacity-70 mb-1">{selectedModel}</div>
                      <div className="flex items-center gap-2">
                        <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm">ÏùëÎãµÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...</span>
                      </div>
                    </div>
                  </div>
                )}
                {/* Ïä§ÌÅ¨Î°§ ÏûêÎèô Ïù¥ÎèôÏùÑ ÏúÑÌïú ÎßàÏª§ */}
                <div ref={messagesEndRef} />
              </div>

              {/* Input Area */}
              <div className="border-t pt-4">
                <form onSubmit={handleSubmit} className="flex gap-2">
                  <input
                    type="text"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                    className="flex-1 p-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    disabled={isLoading}
                  />
                  <button
                    type="submit"
                    disabled={!prompt.trim() || isLoading}
                    className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
                  >
                    Ï†ÑÏÜ°
                  </button>
                </form>
              </div>
            </div>


          </div>
        </div>
      </main>
    </Navigation>
  );
} 